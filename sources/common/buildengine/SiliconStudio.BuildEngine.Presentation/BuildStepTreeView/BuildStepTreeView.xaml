<UserControl x:Class="SiliconStudio.BuildEngine.Presentation.BuildStepTreeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:tv="clr-namespace:System.Windows.Controls;assembly=TreeViewEx"
             xmlns:local="clr-namespace:SiliconStudio.BuildEngine.Presentation"
             xmlns:dragNDrop="clr-namespace:System.Windows.Controls.DragNDrop;assembly=TreeViewEx"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300" >
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../ImageDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BoolToVisiblityConverterCollapsed"/>
            <tv:BoolToVisibilityConverterHidden x:Key="BoolToVisiblityConverterHidden"/>
            <tv:DoubleToThicknessLeftConverter x:Key="DoubleToMarginConverter"/>

            <SolidColorBrush x:Key="DefaultStepBrush" Color="DimGray"/>

            <DataTemplate x:Key="DragTemplate" DataType="dragNDrop:DragContent">
                <Border BorderThickness="1" CornerRadius="3" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{StaticResource DefaultStepBrush}">
                    <Border.RenderTransform>
                        <TranslateTransform X="20" Y="20"/>
                    </Border.RenderTransform>
                    <ContentPresenter x:Name="content">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Image Source="{StaticResource ImageForbidden}" Width="16" Height="16" VerticalAlignment="Center" Margin="4"/>
                                    <TextBlock Text="Invalid slot for dropping." Margin="4"/>
                                </StackPanel>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                </Border>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding CanInsert}" Value="True">
                        <Setter Property="ContentTemplate" TargetName="content" >
                            <Setter.Value>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <Image Source="{StaticResource ImageInsert}" Width="16" Height="16" VerticalAlignment="Center" Margin="4"/>
                                        <TextBlock Text="Insert the selected step(s) here." Margin="4"/>
                                    </StackPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CanDrop}" Value="True">
                        <Setter Property="ContentTemplate" TargetName="content">
                            <Setter.Value>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <Image Source="{StaticResource ImageDrop}" Width="16" Height="16" VerticalAlignment="Center" Margin="4"/>
                                        <TextBlock Text="Add the selected step(s) to this one." Margin="4"/>
                                    </StackPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <Style x:Key="TreeViewToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="UIElement.Focusable" Value="False" />
                <Setter Property="FrameworkElement.Width" Value="16" />
                <Setter Property="FrameworkElement.Height" Value="16" />
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="5" Background="#00FFFFFF" Width="16" Height="16">
                                <Path Fill="#FF595959" Stroke="#FFE0E0E0" Name="ExpandPath">
                                    <Path.Data>
                                        <PathGeometry Figures="M0,0L0,6L6,0z" />
                                    </Path.Data>
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="UIElement.IsMouseOver" Value="True">
                                    <Setter Property="Shape.Fill" TargetName="ExpandPath" Value="LightSkyBlue" />
                                    <Setter Property="Shape.Stroke" TargetName="ExpandPath" Value="LightSkyBlue" />
                                </Trigger>
                                <Trigger Property="ToggleButton.IsChecked" Value="True">
                                    <Setter Property="UIElement.RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Shape.Fill" TargetName="ExpandPath" Value="#FFE0E0E0" />
                                    <Setter Property="Shape.Stroke" TargetName="ExpandPath" Value="#FFE0E0E0" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="UIElement.IsMouseOver" Value="True" />
                                        <Condition Property="ToggleButton.IsChecked" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="UIElement.RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Shape.Fill" TargetName="ExpandPath" Value="LightSkyBlue" />
                                    <Setter Property="Shape.Stroke" TargetName="ExpandPath" Value="LightSkyBlue" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Trigger x:Key="TriggerMouseOver" Property="Border.IsMouseOver" Value="True" SourceName="border">
                <Setter Property="Control.Background" TargetName="border" Value="{Binding BackgroundHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
                <Setter Property="Border.BorderBrush" TargetName="border" Value="{Binding BorderBrushHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
            </Trigger>

            <Trigger x:Key="TriggerIsSelected" Property="tv:TreeViewExItem.IsSelected" Value="True">
                <Setter Property="Control.Background" TargetName="border" Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
                <Setter Property="Border.BorderBrush" TargetName="border" Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
            </Trigger>
            <Trigger x:Key="TriggerIsFocused" Property="tv:TreeViewExItem.IsFocused" Value="True">
                <Setter Property="Border.BorderBrush" TargetName="border" Value="{Binding BorderBrushFocused, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
                <Setter Property="Control.Background" TargetName="border" Value="{Binding BackgroundFocused, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
            </Trigger>
            <MultiTrigger x:Key="TriggerIsMouseOverAndSelected">
                <MultiTrigger.Conditions>
                    <Condition Property="Border.IsMouseOver" Value="True" SourceName="border"/>
                    <Condition Property="tv:TreeViewExItem.IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Border.BorderBrush" TargetName="border" Value="{Binding BorderBrushSelectedHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
                <Setter Property="Control.Background" TargetName="border" Value="{Binding BackgroundSelectedHovered, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
            </MultiTrigger>
            <MultiTrigger x:Key="TriggerIsFocusedAndSelected">
                <MultiTrigger.Conditions>
                    <Condition Property="tv:TreeViewExItem.IsFocused" Value="True" />
                    <Condition Property="tv:TreeViewExItem.IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Border.BorderBrush" TargetName="border" Value="{Binding BorderBrushFocusedSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
                <Setter Property="Control.Background" TargetName="border" Value="{Binding BackgroundFocusedSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
            </MultiTrigger>

            <MultiDataTrigger x:Key="TriggerIsSelectedWindowInactive">
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=IsActive, FallbackValue=False}" Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Border.BorderBrush" TargetName="border" Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
                <Setter Property="Control.Background" TargetName="border" Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
            </MultiDataTrigger>

            <Trigger x:Key="TriggerIsDisabled" Property="UIElement.IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource SystemColors.GrayTextBrushKey}" />
            </Trigger>

            <Trigger x:Key="TriggerIsCurrentDropTarget" Property="tv:TreeViewExItem.IsCurrentDropTarget" Value="True">
                <Setter Property="Control.Background" Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
                <Setter Property="Border.BorderBrush" Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type tv:TreeViewExItem}, AncestorLevel=1}}" />
            </Trigger>

            <Style TargetType="{x:Type tv:TreeViewExItem}" BasedOn="{StaticResource {x:Type tv:TreeViewExItem}}">
                <Setter Property="CanDrag" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_CanDrag}" />
                <Setter Property="Drag" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_Drag}" />

                <Setter Property="CanDrop" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_CanDrop}" />
                <Setter Property="CanDropFormat" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_CanDropFormat}" />
                <Setter Property="DropAction" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_DropAction}" />

                <Setter Property="CanInsert" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_CanInsert}" />
                <Setter Property="CanInsertFormat" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_CanInsertFormat}" />
                <Setter Property="Insert" Value="{Binding ViewModel.Attached_DraggableTreeViewModel_Insert}" />
            </Style>

            <Style x:Key="BuildStepStyle" TargetType="{x:Type tv:TreeViewExItem}" BasedOn="{StaticResource {x:Type tv:TreeViewExItem}}">
                <Setter Property="local:BuildStepDecoration.LeftBackgroundBrush" Value="{StaticResource DefaultStepBrush}" />
                <Setter Property="local:BuildStepDecoration.TopBackgroundBrush" Value="{DynamicResource ControlBackgroundBrush}" />
                <Setter Property="Indentation" Value="24"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type tv:TreeViewExItem}">
                            <DockPanel>
                                <DockPanel x:Name="ct" DockPanel.Dock="Top" Margin="0">
                                    <ToggleButton DockPanel.Dock="Left" 
                                    IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type tv:TreeViewExItem}},Path=IsExpanded,FallbackValue=False}"
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type tv:TreeViewExItem}},Path=HasItems, Converter={StaticResource BoolToVisiblityConverterHidden},FallbackValue=Hidden}"
                                    ClickMode="Press" Name="Expander" HorizontalAlignment="Right" Style="{StaticResource TreeViewToggleButton}" />
                                    <Border x:Name="border" CornerRadius="3"
						            Background="{TemplateBinding local:BuildStepDecoration.TopBackgroundBrush}"
                                    Padding="{TemplateBinding Control.Padding}"
                                    SnapsToDevicePixels="True"
                                    VerticalAlignment="Center" Margin="0">
                                        <DockPanel>
                                            <ContentPresenter x:Name="content"
                                        FocusManager.IsFocusScope="True" 
                                        Content="{TemplateBinding HeaderedContentControl.Header}"
                                        ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                        ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                        ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                        ContentSource="Header"
                                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                        </DockPanel>
                                    </Border>
                                </DockPanel>
                                <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                                    <FrameworkElement Margin="{Binding Indentation, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DoubleToMarginConverter}}"/>
                                    <Border Margin="0,0,0,0" Background="{TemplateBinding local:BuildStepDecoration.LeftBackgroundBrush}"  Width="2"/>
                                </StackPanel>
                                <Border Margin="0" Background="{DynamicResource ControlBackgroundBrush}"
                                     Visibility="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisiblityConverterCollapsed}, FallbackValue=Hidden}"
                                    >
                                    <ItemsPresenter />
                                </Border>
                            </DockPanel>

                            <ControlTemplate.Triggers>
                                <StaticResource ResourceKey="TriggerMouseOver" />
                                <StaticResource ResourceKey="TriggerIsSelected" />
                                <StaticResource ResourceKey="TriggerIsFocused" />
                                <StaticResource ResourceKey="TriggerIsMouseOverAndSelected" />
                                <StaticResource ResourceKey="TriggerIsFocusedAndSelected" />
                                <StaticResource ResourceKey="TriggerIsSelectedWindowInactive" />
                                <StaticResource ResourceKey="TriggerIsDisabled" />
                                <StaticResource ResourceKey="TriggerIsCurrentDropTarget" />
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <tv:TreeViewEx x:Name="TreeView"
                    SelectedItems="{Binding SelectedItems, RelativeSource={RelativeSource AncestorType=local:BuildStepTreeView}}"
                    ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource AncestorType=local:BuildStepTreeView}}"
                    ItemTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType=local:BuildStepTreeView}}"
                    ItemTemplateSelector="{Binding ItemTemplateSelector, RelativeSource={RelativeSource AncestorType=local:BuildStepTreeView}}"
                    OnSelecting="SelectingTreeViewExItem" DragTemplate="{StaticResource DragTemplate}"
                    HorizontalContentAlignment="Stretch" VirtualizingStackPanel.IsVirtualizing="True"
                    ItemContainerStyle="{StaticResource BuildStepStyle}"
                    />
    </Grid>
</UserControl>
