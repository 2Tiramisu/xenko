<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:inpctrl="clr-namespace:SiliconStudio.Presentation.Controls.Input;assembly=SiliconStudio.Presentation"
                    xmlns:ctrl="clr-namespace:SiliconStudio.Presentation.Controls;assembly=SiliconStudio.Presentation"
                    xmlns:cvt="clr-namespace:SiliconStudio.Presentation.ValueConverters;assembly=SiliconStudio.Presentation"
                    xmlns:local="clr-namespace:SiliconStudio.BuildEngine.Editor.View"
                    xmlns:viewModel="clr-namespace:SiliconStudio.Quantum.Legacy;assembly=SiliconStudio.Quantum.Legacy"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:behavior="clr-namespace:SiliconStudio.Presentation.Behaviors;assembly=SiliconStudio.Presentation"
                    xmlns:presentation="clr-namespace:SiliconStudio.BuildEngine.Presentation;assembly=SiliconStudio.BuildEngine.Presentation">
    <!--
    xmlns:remote="clr-namespace:Paradox.RemoteEditor"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:behavior="clr-namespace:Paradox.Framework.UI.Behaviors;assembly=Paradox.Framework.UI"
    -->

    <local:PropertyGridItemTemplateSelector x:Key="PropertyGridItemTemplateSelector"/>
    <!--<remote:ThumbnailConverter x:Key="thumbnailConverter"/>-->
    <cvt:GetFieldValueConverter x:Key="GetFieldValueConverter"/>
    <cvt:EnumValuesConverter x:Key="EnumValuesConverter"/>
    <cvt:CamelCaseTextFormatValueConverter x:Key="CamelCaseTextFormatValueConverter"/>
    <cvt:NullableEnumValuesConverter x:Key="NullableEnumValuesConverter"/>
    <!--<local:StringToEnumConverter x:Key="StringToEnumConverter"/>-->    
    <cvt:CollapsedVisibilityValueConverter x:Key="CollapsedVisibilityValueConverter"/>

    <Style TargetType="Expander">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
        <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
        <Setter Property="Template" Value="{StaticResource PropertyGridExpanderTemplate}"/>
    </Style>

    <Style TargetType="ctrl:DoublePaneContainer">
        <Setter Property="Margin" Value="24,0,0,0"/>
    </Style>
    
    <DataTemplate x:Key="Error">
        <TextBlock Text="Error"/>
    </DataTemplate>

    <DataTemplate x:Key="VectorParameter" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <ctrl:VectorEditor VectorSource="{Binding TValue}">
                <ctrl:VectorEditor.ElementTemplate>
                    <DataTemplate>
                        <inpctrl:NumericInput Margin="10,2,2,2">
                            <!--<i:Interaction.Behaviors>
                                <behavior:OnFocusBindingInterruptionBehavior PropertyName="Value" Binding="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DoubleToFloatValueConverter}}"/>
                            </i:Interaction.Behaviors>-->
                        </inpctrl:NumericInput>
                    </DataTemplate>
                </ctrl:VectorEditor.ElementTemplate>
            </ctrl:VectorEditor>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <!--<DataTemplate x:Key="TextureParameter" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" Text="{Binding PropertyName, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <StackPanel>
                <TextBox IsReadOnly="True" Text="{Binding Path=ObjectRef.Thumbnail.TValue, Mode=OneTime, Converter={StaticResource GetFieldValueConverter}, ConverterParameter=Location}"/>
                <Image Width="64" Height="64" Margin="2" Source="{Binding ObjectRef.Thumbnail.TValue, Converter={StaticResource thumbnailConverter}}" HorizontalAlignment="Left">
                    <i:Interaction.Behaviors>
                        <behavior:DropBehavior DataType="Asset" Command="{Binding ObjectRef.ChangeUrl.TValue}"/>
                    </i:Interaction.Behaviors>
                    <ToolTipService.ToolTip>
                        <Image Width="256" Height="256" Source="{Binding ObjectRef.Thumbnail.TValue, Converter={StaticResource thumbnailConverter}, Mode=OneTime}"/>
                    </ToolTipService.ToolTip>
                </Image>
            </StackPanel>
        </ctrl:DoublePaneContainer>
    </DataTemplate>-->

    <DataTemplate x:Key="ViewModelReference" DataType="{x:Type viewModel:ViewModelReference}">
        <ContentControl Content="{Binding ViewModel}" ContentTemplateSelector="{StaticResource PropertyGridItemTemplateSelector}" Focusable="False"/>
    </DataTemplate>

    <DataTemplate x:Key="ViewModelItemReferenceLink" DataType="{x:Type viewModel:ViewModelReference}">
        <!-- Command="{Binding Path=DataContext.SelectLinkCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:BuildStepPropertyGridUserControl}}" CommandParameter="{Binding ViewModel.Children[1].Value}" -->
        <Button 
                VerticalAlignment="Center" HorizontalContentAlignment="Stretch" BorderThickness="0" Margin="0" Padding="2"
                ToolTipService.InitialShowDelay="0" ToolTipService.BetweenShowDelay="0" ToolTipService.ShowDuration="1000000000"
                Background="Transparent"
                >
            <Button.ToolTip>
                <ToolTip>
<!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
                    <TextBlock Text="{Binding ViewModel.Description.TValue, FallbackValue=Unidentified, Mode=OneWay}" />
<!-- ReSharper restore Xaml.BindingWithContextNotResolved -->
                </ToolTip>
            </Button.ToolTip>
<!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
            <TextBlock Text="{Binding ViewModel.Description.TValue, FallbackValue=Unidentified, Mode=OneWay}" HorizontalAlignment="Stretch" TextAlignment="Left" TextTrimming="CharacterEllipsis"/>
<!-- ReSharper restore Xaml.BindingWithContextNotResolved -->
        </Button>
    </DataTemplate>

    <DataTemplate x:Key="ViewModelReferenceLink">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" Text="{Binding PropertyName, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <!-- Command="{Binding Path=DataContext.SelectLinkCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:BuildStepPropertyGridUserControl}}" CommandParameter="{Binding Value.ViewModel.Children[1].Value}" -->
            <Button  Margin="2" VerticalAlignment="Center"
                    ToolTipService.InitialShowDelay="0" ToolTipService.BetweenShowDelay="0" ToolTipService.ShowDuration="1000000000"
                >
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding TValue.ViewModel.Description.TValue, Mode=OneWay, FallbackValue=Root}" Value="Root">
                                <Setter Property="Button.IsEnabled" Value="False" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                <Button.ToolTip>
                    <ToolTip>
                        <TextBlock Text="{Binding TValue.ViewModel.Description.TValue, FallbackValue=Unidentified, Mode=OneWay}" />
                    </ToolTip>
                </Button.ToolTip>
                <TextBlock Text="{Binding TValue.ViewModel.Description.TValue, Mode=OneWay, FallbackValue=Root}" HorizontalAlignment="Stretch" TextAlignment="Left" TextTrimming="CharacterEllipsis"/>
            </Button>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="ViewModelReferenceNode" DataType="{x:Type viewModel:IViewModelNode}">
        <ContentControl Content="{Binding Value.ViewModel}" ContentTemplateSelector="{StaticResource PropertyGridItemTemplateSelector}" Focusable="False"/>
    </DataTemplate>

    <DataTemplate x:Key="ViewModelReferenceGuid" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <Button Content="{Binding Value.Guid, Mode=OneWay}" Command="{Binding SetAsRoot.TValue}" Margin="1" Padding="3" HorizontalAlignment="Left"/>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="BooleanView" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <CheckBox Margin="2" IsChecked="{Binding TValue}" HorizontalAlignment="Left"/>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="EnumView" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <ComboBox Margin="2" SelectedItem="{Binding TValue}" ItemsSource="{Binding Type, Converter={StaticResource EnumValuesConverter}}"/>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="NullableEnumView" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding Name, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <ComboBox Margin="2" SelectedItem="{Binding TValue}" ItemsSource="{Binding Type, Converter={StaticResource NullableEnumValuesConverter}}"/>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="Color3View" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <Grid>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <ToggleButton Grid.Column="0" x:Name="toggle" VerticalAlignment="Center" Margin="2" Width="22" Height="22">
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <Rectangle Grid.Column="0" VerticalAlignment="Center" Width="20" Height="20" Stroke="Black" StrokeThickness="1">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding Value, Converter={StaticResource Color3ToWPFColorValueConverter}}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>
                    <TextBox Grid.Column="1" Margin="2" VerticalAlignment="Center" Text="{Binding TValue, Converter={StaticResource Color3ToHexaTextValueConverter}}"/>
                </Grid>
                <Popup IsOpen="{Binding ElementName=toggle, Path=IsChecked}" StaysOpen="False">
                    <Grid Background="{StaticResource BackgroundBrush}">
                        <ctrl:ColorPicker Color="{Binding Value, Converter={StaticResource Color3ToEngineColorValueConverter}}"/>
                    </Grid>
                </Popup>
            </Grid>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="DroppableTextBox" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <TextBox Margin="2" Style="{StaticResource PropertyGridTextBoxStyle}" Text="{Binding TValue, FallbackValue=Error}">
                <i:Interaction.Behaviors>
                    <behavior:DropBehavior DataType="SourceFiles" Command="{Binding DropCommand.TValue}" />
                </i:Interaction.Behaviors>
                <!--<i:Interaction.Behaviors>
                    <behavior:OnFocusBindingInterruptionBehavior PropertyName="Text" Binding="{Binding TValue, FallbackValue=Error}"/>
                </i:Interaction.Behaviors>-->
            </TextBox>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="TextBox" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <TextBox Margin="2" Style="{StaticResource PropertyGridTextBoxStyle}" Text="{Binding TValue, FallbackValue=Error}">
                <!--<i:Interaction.Behaviors>
                    <behavior:OnFocusBindingInterruptionBehavior PropertyName="Text" Binding="{Binding TValue, FallbackValue=Error}"/>
                </i:Interaction.Behaviors>-->
            </TextBox>
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="ReadOnlyTextBox" DataType="{x:Type viewModel:IViewModelNode}">
        <ctrl:DoublePaneContainer>
            <ctrl:DoublePaneContainer.Header>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}, FallbackValue=Error}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </ctrl:DoublePaneContainer.Header>
            <TextBox IsReadOnly="true" Margin="2" Style="{StaticResource PropertyGridTextBoxStyle}" Text="{Binding TValue, FallbackValue=Error}" />
        </ctrl:DoublePaneContainer>
    </DataTemplate>

    <DataTemplate x:Key="ListItem">
        <DockPanel>
            <Button Width="20" Margin="2" DockPanel.Dock="Right" Command="{Binding DataContext.Remove.TValue, RelativeSource={RelativeSource FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}">
                <Image Source="{StaticResource ImageRemove}" />
            </Button>
            <TextBox Margin="2" Style="{StaticResource PropertyGridTextBoxStyle}" Text="{Binding TValue, FallbackValue=Error}">
                <i:Interaction.Behaviors>
                    <behavior:DropBehavior DataType="SourceFiles" Command="{Binding DataContext.DropCommand.TValue, RelativeSource={RelativeSource FindAncestor, AncestorType=ItemsControl}}" />
                </i:Interaction.Behaviors>
                <!--<i:Interaction.Behaviors>
                    <behavior:OnFocusBindingInterruptionBehavior PropertyName="Text" Binding="{Binding TValue, FallbackValue=Error}"/>
                </i:Interaction.Behaviors>-->
            </TextBox>
        </DockPanel>
    </DataTemplate>

    <DataTemplate x:Key="ListViewModel" DataType="{x:Type viewModel:IViewModelNode}">
        <Expander IsExpanded="True" Margin="6,0,0,0">
            <Expander.Header>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </Expander.Header>
            <Border Background="{StaticResource BackgroundBrush}"  BorderThickness="1">
                <StackPanel Orientation="Vertical">
                        <ItemsControl Margin="0" Padding="2" Background="Transparent" BorderThickness="0" ItemsSource="{Binding TValue}" ItemTemplateSelector="{StaticResource PropertyGridItemTemplateSelector}" Focusable="False"/>
                        <DockPanel Visibility="{Binding HasChildAdd, Converter={StaticResource CollapsedVisibilityValueConverter}}">
                        <Button Margin="4,0,4,4" HorizontalAlignment="Right" Width="20" Height="20" Command="{Binding Add.TValue}">
                            <Image Source="{StaticResource ImageAdd}" />
                        </Button>
                    </DockPanel>
                </StackPanel>
            </Border>
        </Expander>
    </DataTemplate>

    <!--<DataTemplate x:Key="ListViewModelReference" DataType="{x:Type viewModel:IViewModelNode}">
        <Expander IsExpanded="True" Margin="6,0,0,0">
            <Expander.Header>
                        <TextBlock HorizontalAlignment="Left" Text="{Binding PropertyName}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
            </Expander.Header>
            <Border Background="{StaticResource BackgroundBrush}"  BorderThickness="1">
                <StackPanel Orientation="Vertical">
                <!<StackPanel Orientation="Horizontal" Visibility="{Binding HasChildAdd, Converter={StaticResource CollapsedVisibilityValueConverter}}">
                    <ComboBox x:Name="keyName" Margin="1" ItemsSource="{Binding AvailableKeys.TValue}" IsEditable="True">
                        <i:Interaction.Behaviors>
                            <behavior:OnEventCommandBehavior EventName="GotFocus" Command="{Binding RequestKeys.TValue}"/>
                        </i:Interaction.Behaviors>
                    </ComboBox>
                    <Button Content="Add key" Command="{Binding Add.TValue}" CommandParameter="{Binding Text, ElementName=keyName}"/>
                </StackPanel>>
                    <ItemsControl Margin="0" Padding="2" Background="Transparent" BorderThickness="0" ItemsSource="{Binding Value}" ItemTemplateSelector="{StaticResource PropertyGridItemTemplateSelector}" Focusable="False"/>
                </StackPanel>
            </Border>
        </Expander>
    </DataTemplate>-->

    <DataTemplate x:Key="IViewModelNode" DataType="{x:Type viewModel:IViewModelNode}">
        <StackPanel Focusable="False" Margin="6,0,0,0">
            <Border CornerRadius="4" Background="{StaticResource InnerExpanderBackgroundBrush}" BorderThickness="1" BorderBrush="{StaticResource InnerExpanderBorderBrush}" Margin="0,2,0,2" Focusable="False">
                <Expander x:Name="border" IsExpanded="True" Background="Transparent" Margin="0">
                    <Expander.Header>
                        <TextBlock HorizontalAlignment="Left" Text="{Binding Name, Converter={StaticResource CamelCaseTextFormatValueConverter}}" TextTrimming="CharacterEllipsis" ToolTipService.ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
                    </Expander.Header>
                    <ItemsControl Margin="0" Padding="0" Background="Transparent" BorderThickness="0" ItemsSource="{Binding Children}" ItemTemplateSelector="{StaticResource PropertyGridItemTemplateSelector}" Focusable="False"/>
                </Expander>
            </Border>
        </StackPanel>
    </DataTemplate>
</ResourceDictionary>
