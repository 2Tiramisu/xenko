// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using System;

namespace SiliconStudio.ActionStack
{
    /// <summary>
    /// Represents a token that stores an unique identifier and an object. This token should be generated by
    /// a cancellable command and be passed as argument when the command must be undone.
    /// </summary>
    /// <remarks>This object is immutable.</remarks>
    public struct UndoToken
    {
        private readonly Guid guid;
        private readonly bool canUndo;
        private readonly object tokenValue;

        /// <summary>
        /// Initializes a new instance of the <see cref="UndoToken"/> structure with some parameters.
        /// </summary>
        /// <param name="canUndo">Indicate if this token corresponds to an action that can be undone.</param>
        /// <param name="tokenValue">The object stored in this token which can be used to undo the associated action (such as previous value of a property).</param>
        public UndoToken(bool canUndo, object tokenValue = null)
        {
            guid = Guid.NewGuid();
            this.canUndo = canUndo;
            this.tokenValue = tokenValue;
        }

        /// <summary>
        /// Gets a unique identifier for the token.
        /// </summary>
        public Guid Guid { get { return guid; } }

        /// <summary>
        /// Gets whether this token represents an action that can actually be undone.
        /// </summary>
        public bool CanUndo { get { return canUndo; } }

        /// <summary>
        /// Gets a user-defined object hosted by the token that should store all information needed to undo a command.
        /// </summary>
        public object TokenValue { get { return tokenValue; } }
    }
}