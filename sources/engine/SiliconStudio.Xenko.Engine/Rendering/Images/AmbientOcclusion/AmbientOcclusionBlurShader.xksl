// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

namespace SiliconStudio.Xenko.Rendering.Images
{

#define     SCALE       (2.1f)

    /// <summary>
    /// A gaussian blur shader
    /// </summary>
    internal shader AmbientOcclusionBlurShader<int BlurCount, bool IsVertical> : ImageEffectShader
    {
        stage float  Weights[BlurCount];

        stage override float4 Shading()
        {
            // Direction in texel size: (float2(1,0) or float2(0,1)) * texel size
            float2 direction = (IsVertical ? float2(0, 1) : float2(1, 0)) * Texture0TexelSize;

            // Add center
            float totalWeight = Weights[0];
            float3 sum = Texture0.Sample(LinearSampler, streams.TexCoord).rgb * totalWeight;

            // mirrored samples using bilinear filtering
            [unroll]
            for(int i = 1; i < BlurCount; i++)
            {
                // Handle both directions
                [unroll]
                for (int j = -1; j <= 1; j += 2)
                {
                    float weight = 0.3 + Weights[i];

                    float value = Texture0.Sample(LinearSampler, streams.TexCoord + direction * j * i * SCALE).rgb;

                    sum += value * weight;

                    totalWeight += weight;
                }
            }

            const float epsilon = 0.0001;
            sum /= (totalWeight + epsilon);
            return float4(sum, 1);
        }
    };
}
