// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using SiliconStudio.Paradox.Graphics;


#line 1 "C:\DEV\paradox\sources\engine\SiliconStudio.Paradox.Engine.Tests\Default.pdxfx"
using SiliconStudio.Paradox.Effects.Data;

#line 3
namespace Test
{
    [DataContract]
#line 5
    public partial class RenderingParameters : ShaderMixinParameters
    {

        #line 7
        public static readonly ParameterKey<bool> UseDeferred = ParameterKeys.New<bool>();

        #line 8
        public static readonly ParameterKey<bool> UseTransparent = ParameterKeys.New<bool>();
    };

    #line 12
    public partial class GBufferShaderPass  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 15
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 16
            context.Mixin(mixin, "GBuffer");

            #line 17
            context.Mixin(mixin, "NormalVSStream");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("GBufferShaderPass", new GBufferShaderPass());
        }
    }

    #line 21
    public partial class GBufferPlugin  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            {

                #line 23
                var __subMixin = new ShaderMixinSourceTree() { Name = "GBufferShaderPass", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 23
                context.Mixin(__subMixin, "GBufferShaderPass");
            }

            #line 26
            context.RemoveMixin(mixin, "PositionVSStream");

            #line 27
            context.RemoveMixin(mixin, "NormalVSStream");

            #line 28
            context.RemoveMixin(mixin, "SpecularPowerPerMesh");

            #line 31
            context.Mixin(mixin, "NormalVSGBuffer");

            #line 32
            context.Mixin(mixin, "PositionVSGBuffer");

            #line 33
            context.Mixin(mixin, "SpecularPowerGBuffer");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("GBufferPlugin", new GBufferPlugin());
        }
    }

    #line 36
    public partial class LightPrepassEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 38
            context.Mixin(mixin, "LightPrepass");

            #line 39
            context.Mixin(mixin, "PositionVSGBuffer");

            #line 40
            context.Mixin(mixin, "NormalVSGBuffer");

            #line 41
            context.Mixin(mixin, "SpecularPowerGBuffer");

            {

                #line 42
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 42
                context.Mixin(__subMixin, "ComputeBRDFColorFresnel");
                mixin.Mixin.AddComposition("DiffuseColor", __subMixin.Mixin);
            }

            {

                #line 43
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 43
                context.Mixin(__subMixin, "ComputeBRDFDiffuseLambert");
                mixin.Mixin.AddComposition("DiffuseLighting", __subMixin.Mixin);
            }

            {

                #line 44
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 44
                context.Mixin(__subMixin, "ComputeBRDFColor");
                mixin.Mixin.AddComposition("SpecularColor", __subMixin.Mixin);
            }

            {

                #line 45
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 45
                context.Mixin(__subMixin, "ComputeBRDFColorSpecularBlinnPhong");
                mixin.Mixin.AddComposition("SpecularLighting", __subMixin.Mixin);
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("LightPrepassEffect", new LightPrepassEffect());
        }
    }

    #line 48
    public partial class Default  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 54
            context.Mixin(mixin, "ShaderBase");

            #line 55
            context.Mixin(mixin, "TransformationWAndVP");

            #line 56
            context.Mixin(mixin, "BRDFDiffuseBase");

            #line 57
            context.Mixin(mixin, "BRDFSpecularBase");

            #line 58
            context.Mixin(mixin, "AlbedoFlatShading");

            #line 60
            if (context.GetParam(MaterialParameters.AlbedoDiffuse) != null)
            {

                {

                    #line 62
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 62
                    context.Mixin(__subMixin, "ComputeBRDFDiffuseLambert");
                    mixin.Mixin.AddComposition("DiffuseColor", __subMixin.Mixin);
                }

                {

                    #line 63
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 63
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoDiffuse));
                    mixin.Mixin.AddComposition("albedoDiffuse", __subMixin.Mixin);
                }
            }

            #line 66
            if (context.GetParam(MaterialParameters.AlbedoSpecular) != null)
            {

                {

                    #line 68
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 68
                    context.Mixin(__subMixin, "ComputeBRDFColorSpecularBlinnPhong");
                    mixin.Mixin.AddComposition("SpecularColor", __subMixin.Mixin);
                }

                {

                    #line 69
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 69
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoSpecular));
                    mixin.Mixin.AddComposition("albedoSpecular", __subMixin.Mixin);
                }
            }

            #line 72
            if (context.GetParam(MaterialParameters.HasSkinningPosition))
            {

                #line 74
                if (context.GetParam(MaterialParameters.SkinningBones) > context.GetParam(MaterialParameters.SkinningMaxBones))
                {

                    #line 77
                    context.SetParam(MaterialParameters.SkinningMaxBones, context.GetParam(MaterialParameters.SkinningBones));
                }

                #line 79
                mixin.Mixin.AddMacro("SkinningMaxBones", context.GetParam(MaterialParameters.SkinningMaxBones));

                #line 80
                context.Mixin(mixin, "TransformationSkinning");
            }

            #line 85
            if (context.GetParam(RenderingParameters.UseDeferred) && !context.GetParam(RenderingParameters.UseTransparent))
            {

                #line 87
                context.Mixin(mixin, "GBufferPlugin");

                #line 88
                context.Mixin(mixin, "LightDeferredShading");
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("Default", new Default());
        }
    }
}
