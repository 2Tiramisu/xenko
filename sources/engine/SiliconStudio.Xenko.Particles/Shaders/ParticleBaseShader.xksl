// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

class ParticleBaseShader  : ShaderBase, Texturing
{
    // -------------------------------------
    // streams
    // -------------------------------------
    stage stream float4 Position : POSITION;

    stage stream float4 Color : COLOR;

    nointerpolation stage stream float Lifetime     : BATCH_LIFETIME;
    nointerpolation stage stream float RandomSeed   : BATCH_RANDOMSEED; // Ideally should be uint. Note! The xksl doesn't support nointerpolation, so cast the float as int before using it

    // -------------------------------------
    // uniforms
    // -------------------------------------

    // !When a bigger structure (float4) follow a smaller structure (float) the binding seems off
    // Declare the uniforms in the order float4x4 > float4 > float > uint

    // A general transformation matrix
    stage float4x4 MatrixTransform;

    stage float4 ColorScale;

    // When the value is 0 there is no occlusion (100% emissive), when it is 1 there is 100% occlusion (still limited by alpha)
    stage float AlphaAdditive;
            
    // -------------------------------------
    // VertexShader
    // -------------------------------------
    stage override void VSMain()
    {
        float4 worldPos = streams.Position;

        streams.ShadingPosition = mul(worldPos, MatrixTransform);

        //if (TSRgb)
        //{
        //    streams.Color = ColorUtility.ToLinear(streams.Color);
        //}
    }

    // Shading of the sprite
    stage override void PSMain()
    {
        float4 colorTarget = Shading();

        colorTarget.a *= AlphaAdditive;

        streams.ColorTarget = colorTarget;
    }

    stage float4 Shading()
    {
        return float4(1,1,1,1);//ColorScale * streams.Color;
    }
};
