// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

namespace SiliconStudio.Xenko.Rendering
{

class ParticleBatchShader<bool TSRgb, bool THasTexture> : ParticleBase
{
    // -------------------------------------
    // streams
    // -------------------------------------
    //compose IComputeColor computeColor0;

    //compose IComputeColor computeColor1;

    compose ComputeColor  baseColor;

    // -------------------------------------
    // streams
    // -------------------------------------
    stage stream float4 Color : COLOR;

    nointerpolation stage stream float Lifetime     : BATCH_LIFETIME;
    nointerpolation stage stream float RandomSeed   : BATCH_RANDOMSEED; // Ideally should be uint. Note! The xksl doesn't support nointerpolation, so cast the float as int before using it

    // -------------------------------------
    // VertexShader
    // -------------------------------------
    stage override void VSMain()
    {
        base.VSMain();
        if (TSRgb)
        {
            streams.Color = ColorUtility.ToLinear(streams.Color);
        }
    }

    // Shading of the sprite
    stage override float4 Shading()
    {
        float4 baseFloat4 = baseColor.Compute();
        
        float4 finalColor = GenerateRandomColor() * streams.Color;
        
        finalColor = lerp(baseFloat4, finalColor, streams.Lifetime);
//        finalColor.r = streams.Lifetime;
//        finalColor.g = streams.Lifetime;
//        finalColor.b = streams.Lifetime;
//       finalColor.a = 1;

        if (THasTexture)
        {
            finalColor *= ((RenderFlagSwizzle == 0) ? SampleTex0() : SampleTex0().rrrr);
        }

        finalColor.rgb *= ColorIntensity;
        // Test - for dynamic shaders
        //finalColor.b *= 200;
        finalColor.a   *= AlphaAdditive;

        return finalColor;
    }

    stage float4 SampleTex0()
    {
        return Texture0.Sample(Sampler0, streams.TexCoord);                     // User-defined sampler state
        // return Texture0.Sample(AnisotropicRepeatSampler, streams.TexCoord);  // Predefined sampler state
    }

    stage float4 GenerateRandomColor()
    {
        float fSeed = (float) (streams.RandomSeed + ColorScaleOffset);

        return lerp(ColorScaleMin, ColorScaleMax, GetRandom(fSeed));
    }

    /////////////////////////////////////////////////////////////////
    // Randomness
    /////////////////////////////////////////////////////////////////

    // Some notes on randomness
    //  The algorithm below is uses unsigned integer as input and generates deterministic random values with good distribution.
    //  Because we can't pass uint as vertex input, we use a float and cast it twice to prevent interpolation errors.
    //  Also, casting a huge uint value to float causes underflow, so we limit the input value to 0 .. 0xFFFF (the masking is done on the CPU side)

    static const float  GelfondConst = 23.1406926327792690;            // e to the power of Pi = (-1) to the power of -i
    static const float  GelfondSchneiderConst = 2.6651441426902251;    // 2 to the power of sqrt(2)
    static const float2 Gelfond = float2(GelfondConst, GelfondSchneiderConst);
    static const float  Numerator = 123456789;

    stage float GetRandom(float fSeed)
    {
        // Cast to int once to prevent interpolation errors
        int uSeed = (int) (fSeed);
        fSeed = (float) uSeed;

        float2 rand2 = float2(cos(fSeed), sin(fSeed));

        float dotProduct = dot(rand2, Gelfond);

        return frac(fmod(Numerator, 1e-7 + 256.f * dotProduct));
    }

    /////////////////////////////////////////////////////////////////

};

}
