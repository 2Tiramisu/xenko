// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

class ParticleBase : ShaderBase, Texturing
{
    // -------------------------------------
    // streams
    // -------------------------------------
    stage stream float4 Position : POSITION;

    // -------------------------------------
    // uniforms
    // -------------------------------------
    // A general transformation matrix
//    stage float4x4 MatrixTransform;
    stage float4x4 ViewMatrix;
    stage float4x4 ProjectionMatrix;
    stage float4 InvViewX;
    stage float4 InvViewY;
        
    // -------------------------------------
    // VertexShader
    // -------------------------------------
    stage override void VSMain()
    {
        float2 cornerOffset;
        cornerOffset.r = streams.TexCoord.r * 2 - 1;
        cornerOffset.g = 1 - streams.TexCoord.g * 2;

        float4 worldPos = streams.Position;
       // worldPos.rgb += cornerOffset.rrr * InvViewX.rgb;
       // worldPos.rgb += cornerOffset.ggg * InvViewY.rgb;

//        float4 viewPos = mul(streams.Position + InvViewX * cornerOffset.rrr + InvViewY * cornerOffset.ggg, ViewMatrix);
        float4 viewPos = mul(worldPos, ViewMatrix);
        //viewPos.w = 1;

        viewPos.rg += cornerOffset;


        streams.ShadingPosition = mul(viewPos, ProjectionMatrix);

//        streams.ShadingPosition = mul(streams.Position, MatrixTransform);
    }

    // Shading of the sprite
    stage override void PSMain()
    {
        streams.ColorTarget = Shading();
    }

    stage float4 Shading()
    {
        return Texture0.Sample(Sampler, streams.TexCoord);
    }
};
