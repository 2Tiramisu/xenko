// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Paradox.Effects.ShadowMaps
{
    /// <summary>
    /// Performs variance filtering.
    /// </summary>
    class ShadowMapFilterVsm : ShadowMapFilterBase
    {
        cbuffer PerPass
        {
            float BleedingFactor;
            float MinVariance;
        };

        float FilterShadow(Texture2D shadowMapTextureArg, SamplerState shadowMapSamplerArg, float2 position, float shadowMapDistance)
        {
            float2 moments = (float2)shadowMapTextureArg.SampleLevel(shadowMapSamplerArg, position, 0.0);
            float variance = moments.y - moments.x * moments.x;
            // Clamp variance to min
            variance = max(variance, MinVariance);
            float dist = moments.x - shadowMapDistance;
            float pMax = variance / (variance + dist * dist);
            // Light bleeding reduction (See http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html  Light Bleeding 8.4.3)
            pMax = saturate((pMax - BleedingFactor) / (1.0 - BleedingFactor));
            float p = shadowMapDistance <= moments.x;
            return max(p, pMax);        
        }
    };
}