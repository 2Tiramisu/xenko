// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <summary>
/// Renders the geometry in the correct view for a cube map.
/// </summary>
class CameraCube : PositionStream4, ShaderBase
{
    float3 CameraWorldPosition;

    float4x4 CameraViewProjectionMatrices[6];

    stream uint RTAIndex : SV_RenderTargetArrayIndex;

    [maxvertexcount(18)]
    stage void GSMain(triangle Input input[3], inout TriangleStream<Output> triangleStream)
    {
        OutputToView(input, triangleStream, 0);
        OutputToView(input, triangleStream, 1);
        OutputToView(input, triangleStream, 2);
        OutputToView(input, triangleStream, 3);
        OutputToView(input, triangleStream, 4);
        OutputToView(input, triangleStream, 5);
    }

    void OutputToView(triangle Input input[3], inout TriangleStream<Output> triangleStream, uint viewIndex)
    {
        streams = input[0];
        streams.RTAIndex = viewIndex;
        streams.ShadingPosition = mul(streams.PositionWS, CameraViewProjectionMatrices[viewIndex]);
        triangleStream.Append(streams);
        streams = input[1];
        streams.ShadingPosition = mul(streams.PositionWS, CameraViewProjectionMatrices[viewIndex]);
        triangleStream.Append(streams);
        streams = input[2];
        streams.ShadingPosition = mul(streams.PositionWS, CameraViewProjectionMatrices[viewIndex]);
        triangleStream.Append(streams);
        triangleStream.RestartStrip();
    }
};