// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Paradox.Effects.Materials
{
    /// <summary>
    /// Performs the shading of a material according to the lights
    /// </summary>
    class MaterialSurfaceLightingAndShading : IMaterialSurface, LightGroupArray, LightStream, NormalStream, MaterialShadingStream
    {
        compose IMaterialSurfaceShading surfaces[];

        override void Compute()
        {
            // Before performing the shading for all lights, update the NormalVS with the latest normal
            // In case normal mapping is not used, this is a no-op
            UpdateNormalVSFromTangentToView(streams.matNormal);

            // Make sure that light stream is reset
            ResetLightStream();

            foreach(var lightGroup in lightGroups)
            {
                const int maxLightCount = lightGroup.GetMaxLightCount();
                int count = lightGroup.GetLightCount();
                
                [unroll]
                for(int i = 0; i < maxLightCount; i++)
                {
                    if (i >= count)
                    {
                        break;
                    }

                    // Compute the light color and direction
                    lightGroup.ComputeLight(i);

                    // Compute common material shading streams (TODO: This is temporary)
                    ComputeCommonMaterialShadingStreams();

                    // Iterate on shading models
                    foreach(var surface in surfaces)
                    {
                        streams.shadingColor += surface.Shading();
                    }
                }
            }
        }
    };
}