// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Paradox.Effects.Materials
{
    class MaterialStream
    {
        /// <summary>
        /// The blending applied between the current and previous material attributes
        /// </summary>
        stage stream float matBlend;
    
        // Surface attributes
        stage stream float3 matNormal;

        // Diffuse attributes
        stage stream float4 matDiffuse;

        stage stream float3 matDiffuseVisible; // Precomputed before lighting

        // Microsurface attributes
        stage stream float  matGlossiness;

        // Specular attributes
        stage stream float3 matSpecular;

        stage stream float3 matSpecularVisible; // Precomputed before lighting 

        stage stream float  matSpecularIntensity;
        // Occlusion attributes
        stage stream float  matAmbientOcclusion;
        stage stream float  matCavity;
        stage stream float  matCavityDiffuse;
        stage stream float  matCavitySpecular;

        // Emissive attributes
        stage stream float3  matEmissive;
        stage stream float   matEmissiveIntensity;

        void ResetMaterialStream()
        {
            // Reset all values for material stream to avoid pulling from a different stage (VS...etc.)
            // TODO: It might be interesting to support pulling from VS, but this should be done from the IMaterialSurface and dedicated ComputerColors
            streams.matBlend = 0.0f;
            streams.matNormal = float3(0, 0, 1);

            streams.matDiffuse = 0.0f; 
            streams.matDiffuseVisible = 0.0f;      

            streams.matSpecular = 0.0f;        
            streams.matSpecularVisible = 0.0f;      
            streams.matSpecularIntensity = 1.0f;

            streams.matGlossiness = 0.0f;

            streams.matAmbientOcclusion = 0.0f;

            streams.matCavity = 1.0f;
            streams.matCavityDiffuse = 0.0f;
            streams.matCavitySpecular = 0.0f;
        }

        void PrepareMaterialForLightingAndShading()
        {
            streams.matDiffuseVisible = streams.matDiffuse.rgb * lerp(1.0f, streams.matCavity, streams.matCavityDiffuse);
            streams.matSpecularVisible = streams.matSpecular.rgb * streams.matSpecularIntensity * lerp(1.0f, streams.matCavity, streams.matCavitySpecular);
        }
    };
}

