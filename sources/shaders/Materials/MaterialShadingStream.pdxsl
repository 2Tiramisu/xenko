// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Paradox.Effects.Materials
{
    class MaterialShadingStream : MaterialStream, NormalStream, LightStream
    {
        // Inputs while shading a material surface
        stage stream float3 shadingView;

        // Output of shading a material surface
        stage stream float3 shadingColor;

        // Half vector (sum of normalVS + lightDirectionVS)
        stage stream float3 H;

        // normal dot light
        stage stream float NdotL;

        // normal dot view
        stage stream float NdotV;

        // normal dot half vector
        stage stream float NdotH;

        // light dot half vector
        stage stream float LdotH;

        // view dot half vector
        stage stream float VdotH;

        // disney-burley roughness
        stage stream float alphaRoughness;

        // Computes material attributes per light
        stage void PrepareMaterialPerDirectLight()
        {
            // TODO: This is not plug-n-play

            // Used by microfacet
            streams.H = normalize(streams.shadingView + streams.lightDirectionVS);
            streams.NdotL = saturate(dot(streams.normalVS, streams.lightDirectionVS));
            streams.NdotV = max(dot(streams.normalVS, streams.shadingView), 0.0001f);
            streams.NdotH = saturate(dot(streams.normalVS, streams.H));
            streams.LdotH = saturate(dot(streams.lightDirectionVS, streams.H));
            streams.VdotH = streams.LdotH;

            // Calculate shading roughtness using Disney-Burley method
            // roughness-burley = roughness^2 = (1 - glossy)^2
            var roughness = 1.0f - streams.matGlossiness;
            streams.alphaRoughness = max(roughness * roughness, 2e-3);
            // TODO: precalculate alphaRoughness^2
        }
    };
}

