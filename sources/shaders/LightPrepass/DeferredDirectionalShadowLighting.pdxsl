// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <summary>
/// Computes lighting prepass from directional lights with shadows.
/// </summary>
class DeferredDirectionalShadowLighting : DeferredLightingBase, ShadowBase
{
    BRDFDiffuseBase brdfDiffuse = stage;
    BRDFSpecularBase brdfSpecular = stage;

    struct DirectLightInfo
    {
        float3 vDirectionVS;
        float intensity;
        float3 color;
    };

    [Link("LightingPrepassRenderer.LightCount")]
    int LightCount = 1;

    cbuffer LightData
    {
        [Link("LightingPrepassRenderer.DirectLightInfos")]
        DirectLightInfo DirectLightInfos[1];
    }

    override float4 ComputeLighting(float3 positionVS, float3 normalVS, float3 eyeVS)
    {
        float4 lighting = float4(0,0,0,0);

        ComputeShadowMapPositions(float4(positionVS,1));

        DirectLightInfo lightInfo = DirectLightInfos[0];
        float3 lightDir = -lightInfo.vDirectionVS;

        // Normalize lightDir
        lightDir = normalize(lightDir);
        
        float3 lightColor = lightInfo.color; // pow(lightInfo.color,2.2);

        // Compute Diffuse Lighting
        float3 diffuseLighting = lightInfo.intensity * brdfDiffuse.ComputeDiffuseLighting(lightColor, lightDir, normalVS, eyeVS);

        // Compute Specular Lighting
        float3 specularLighting = lightInfo.intensity * brdfSpecular.ComputeSpecularLighting(lightColor, lightDir, normalVS, eyeVS);

        float3 shadowFactor = ComputeShadowFactor(0);

        // To reduce bandwidth we don't store 2 x (RGBDiffuse + RGBSpecular), we store only the RGBDiffuse + Utilities.Luminance(RGBSpecular)
        // Luminance(lighting.Specular)
        lighting += float4(shadowFactor * diffuseLighting, shadowFactor.x * Utilities.Luminance(specularLighting));
        
        return lighting;
    }
};