// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using SiliconStudio.Paradox.Graphics;


#line 3 "C:\Projects\Paradox\sources\shaders\CubemapBlendEffect.pdxfx"
using SiliconStudio.Paradox.Effects.Data;

#line 4
using SiliconStudio.Paradox.Effects.Modules;

#line 5
using SiliconStudio.Paradox.Effects.Modules.Renderers;

#line 7
namespace CubemapBlendShader
{

    #line 9
    public partial class SingleCubemapShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 12
            context.Mixin(mixin, "CubemapFace", context.GetParam(CubemapBlendRenderer.CubemapKey));
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("SingleCubemapShader", new SingleCubemapShader());
        }
    }

    #line 15
    public partial class CubemapBlendEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 21
            context.Mixin(mixin, "ShaderBase");

            #line 22
            context.Mixin(mixin, "PostEffectBase");

            #line 25
            mixin.Mixin.AddMacro("TEXTURECUBE_BLEND_COUNT", context.GetParam(CubemapBlendRenderer.CubemapCount));

            #line 27
            if (context.GetParam(CubemapBlendRenderer.UseMultipleRenderTargets))

                #line 28
                context.Mixin(mixin, "CubemapBlenderMRT");

            #line 30
            else

                #line 30
                context.Mixin(mixin, "CubemapBlender");

            #line 32
            foreach(var ____1 in context.GetParam(CubemapBlendRenderer.Cubemaps))

            {

                #line 32
                context.PushParameters(____1);

                {

                    #line 34
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 34
                    context.Mixin(__subMixin, "SingleCubemapShader");
                    mixin.Mixin.AddCompositionToArray("Cubemaps", __subMixin.Mixin);
                }

                #line 32
                context.PopParameters();
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("CubemapBlendEffect", new CubemapBlendEffect());
        }
    }
}
