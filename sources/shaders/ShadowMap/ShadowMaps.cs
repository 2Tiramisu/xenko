// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using SiliconStudio.Paradox.Graphics;


#line 1 "C:\Projects\Paradox\sources\shaders\Shadowmap\ShadowMaps.pdxfx"
using SiliconStudio.Paradox.Engine;

#line 3
namespace SiliconStudio.Paradox.Effects.Modules
{

    #line 6
    public partial class ShadowMapReceiverEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 10
            context.Mixin(mixin, "ShadowMapCascadeBase");

            #line 12
            mixin.Mixin.AddMacro("SHADOWMAP_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCount));

            #line 13
            mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 15
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Nearest)

                #line 16
                context.Mixin(mixin, "ShadowMapFilterDefault");

            #line 17
            else 
#line 17
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.PercentageCloserFiltering)

                #line 18
                context.Mixin(mixin, "ShadowMapFilterPcf");

            #line 19
            else 
#line 19
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Variance)

                #line 20
                context.Mixin(mixin, "ShadowMapFilterVsm");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ShadowMapReceiverEffect", new ShadowMapReceiverEffect());
        }
    }

    #line 24
    public partial class ShadowMapCaster  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 29
            context.CloneProperties();

            #line 29
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 30
            context.Mixin(mixin, "ShadowMapCasterBase");

            #line 32
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Variance)

                #line 33
                context.Mixin(mixin, "ShadowMapCasterVsm");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ShadowMapCaster", new ShadowMapCaster());
        }
    }

    #line 37
    public partial class ShadowMapEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            {

                #line 41
                var __subMixin = new ShaderMixinSourceTree() { Name = "ShadowMapCaster", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 41
                context.BeginChild(__subMixin);

                #line 41
                context.Mixin(__subMixin, "ShadowMapCaster");

                #line 41
                context.EndChild();
            }

            #line 43
            if (context.GetParam(ShadowMapParameters.ShadowMaps) == null || context.GetParam(ShadowMapParameters.ShadowMaps).Length == 0)

                #line 44
                return;

            #line 46
            context.Mixin(mixin, "ShadowMapReceiver");

            #line 51
            foreach(var ____1 in context.GetParam(ShadowMapParameters.ShadowMaps))

            {

                #line 51
                context.PushParameters(____1);

                {

                    #line 53
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 53
                    context.Mixin(__subMixin, "ShadowMapReceiverEffect");
                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                }

                #line 51
                context.PopParameters();
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ShadowMapEffect", new ShadowMapEffect());
        }
    }
}
