// Copyright (c) 2014 Silicon Studio Corporation (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <summary>
/// Computes the lighting from the cubemap in a deferred pass.
/// </summary>
class CubemapIBL : ShadingBase, TransformationWAndVP, Transformation, PositionVSGBuffer, NormalVSGBuffer, Texturing
{
    // TODO: transformation
    float CubemapRadius;
    float3 CubemapPosition;
    TextureCube Cubemap;
    
    override stage float4 Shading()
    {
        float3 positionVS = PositionVS();
        float3 normalVS = NormalVS();
        float3 samplingDirVS = reflect(positionVS, normalVS);
        
        float4 cubemapPositionVS4 = mul(float4(CubemapPosition, 1), View);

        float alpha = max(1 - (length(cubemapPositionVS4.xyz / cubemapPositionVS4.w - positionVS) / CubemapRadius), 0);

        if (alpha == 0)
            discard;

        // parallax correction done in view space
        samplingDirVS = CubemapUtils.ParallaxCorrection(samplingDirVS, positionVS, cubemapPositionVS4.xyz / cubemapPositionVS4.w, CubemapRadius);
        float3 samplingDir = mul(float4(samplingDirVS, 0), ViewInverse).xyz;

        // always flip z
        samplingDir.z = -samplingDir.z;

        // TODO: change mip level based on roughness
        float4 color = Cubemap.Sample(Texturing.LinearSampler, samplingDir);
        color.a = alpha;

        return color;
    }
};