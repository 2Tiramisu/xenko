// Copyright (c) 2014 Silicon Studio Corporation (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
#ifndef TEXTURECUBE_BLEND_COUNT
# define TEXTURECUBE_BLEND_COUNT 1
#endif
class CubemapBlendMRT : ShaderBase
{
    stream uint ViewIndexStream : TEMPSEM;

    // Default COLOR outputs for PS shader
    stage stream float4 ColorTarget1 : SV_Target1;
    stage stream float4 ColorTarget2 : SV_Target2;
    stage stream float4 ColorTarget3 : SV_Target3;
    stage stream float4 ColorTarget4 : SV_Target4;
    stage stream float4 ColorTarget5 : SV_Target5;
    
    ComputeColor Cubemaps[];
    float BlendIndices[TEXTURECUBE_BLEND_COUNT];

    override stage void PSMain()
    {
        base.PSMain();

        float4 finalColor0 = 0;
        float4 finalColor1 = 0;
        float4 finalColor2 = 0;
        float4 finalColor3 = 0;
        float4 finalColor4 = 0;
        float4 finalColor5 = 0;

        var index = 0;
        foreach (var cubemap in Cubemaps)
        {
            streams.ViewIndexStream = 0;
            finalColor0 += BlendIndices[index] * cubemap.Compute();
            streams.ViewIndexStream = 1;
            finalColor1 += BlendIndices[index] * cubemap.Compute();
            streams.ViewIndexStream = 2;
            finalColor2 += BlendIndices[index] * cubemap.Compute();
            streams.ViewIndexStream = 3;
            finalColor3 += BlendIndices[index] * cubemap.Compute();
            streams.ViewIndexStream = 4;
            finalColor4 += BlendIndices[index] * cubemap.Compute();
            streams.ViewIndexStream = 5;
            finalColor5 += BlendIndices[index] * cubemap.Compute();

            ++index;
        }

        streams.ColorTarget  = finalColor0;
        streams.ColorTarget1 = finalColor1;
        streams.ColorTarget2 = finalColor2;
        streams.ColorTarget3 = finalColor3;
        streams.ColorTarget4 = finalColor4;
        streams.ColorTarget5 = finalColor5;
    }
};