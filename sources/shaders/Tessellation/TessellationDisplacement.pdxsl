// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <summary>
/// Displaces the tessellated patch.
/// </summary>
/// <remarks>
/// TFactor: generic Semantic - Displacement factor.
/// TBase: generic Semantic - Base displacement.
///
/// InputControlPointCount: Macro - number of input control points.
/// </remarks>
#ifndef InputControlPointCount
# define InputControlPointCount 3
#endif
// TODO: REWRITE in WS
class TessellationDisplacement<float TFactor, float TBase> : ShaderBaseTessellation, TessellationFlat, Texturing, NormalStream
{
    compose ComputeColor tessellationDisplacement;

    override float ComputeClipping(InputPatch<Input, InputControlPointCount> input, const OutputPatch<Input2, 3> output, inout Constants constants)
    {
        float minHeight = (0.0f - TBase) * TFactor;
        float maxHeight = (1.0f - TBase) * TFactor;
        return ComputeClippingGroup3(input[0].PositionWS, input[1].PositionWS, input[2].PositionWS, ViewProjection)
            && ComputeClippingGroup3(input[0].PositionWS + minHeight * float4(input[0].normalWS, 0.0f), input[1].PositionWS + minHeight * float4(input[1].normalWS, 0.0f), input[2].PositionWS + minHeight * float4(input[2].normalWS, 0.0f), ViewProjection)
            && ComputeClippingGroup3(input[0].PositionWS + maxHeight * float4(input[0].normalWS, 0.0f), input[1].PositionWS + maxHeight * float4(input[1].normalWS, 0.0f), input[2].PositionWS + maxHeight * float4(input[2].normalWS, 0.0f), ViewProjection);
    }

    override void TessellateDomain()
    {
        float height = (tessellationDisplacement.Compute().r - TBase) * TFactor;
        streams.PositionWS.xyz += streams.normalWS * height;
    }
};
