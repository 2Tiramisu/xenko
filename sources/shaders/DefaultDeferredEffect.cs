// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using SiliconStudio.Paradox.Graphics;


#line 3 "C:\Projects\Paradox\sources\shaders\DefaultDeferredEffect.pdxfx"
using SiliconStudio.Paradox.Effects.Data;

#line 4
using SiliconStudio.Paradox.Engine;

#line 5
using SiliconStudio.Paradox.DataModel;

#line 7
namespace DefaultEffects
{
    [DataContract]
#line 10
    public partial class LightingParameters : ShaderMixinParameters
    {

        #line 12
        public static readonly ParameterKey<int> PerPixelDirectionalLightCount = ParameterKeys.New<int>();

        #line 13
        public static readonly ParameterKey<int> PerPixelDiffuseDirectionalLightCount = ParameterKeys.New<int>();

        #line 14
        public static readonly ParameterKey<int> PerVertexDirectionalLightCount = ParameterKeys.New<int>();

        #line 15
        public static readonly ParameterKey<int> PerVertexDiffusePixelSpecularDirectionalLightCount = ParameterKeys.New<int>();
    };

    #line 19
    public partial class ParadoxGBufferShaderPass  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 24
            context.CloneProperties();

            #line 24
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 25
            context.Mixin(mixin, "GBuffer");

            #line 26
            context.Mixin(mixin, "NormalVSStream");

            #line 28
            if (context.GetParam(MaterialParameters.SpecularPowerMap) != null)
            {

                #line 30
                context.Mixin(mixin, "SpecularPower");

                {

                    #line 31
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 31
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularPowerMap));
                    mixin.Mixin.AddComposition("SpecularPowerMap", __subMixin.Mixin);
                }
            }

            #line 34
            if (context.GetParam(MaterialParameters.SpecularIntensityMap) != null)
            {

                {

                    #line 36
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 36
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularIntensityMap));
                    mixin.Mixin.AddComposition("SpecularIntensityMap", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxGBufferShaderPass", new ParadoxGBufferShaderPass());
        }
    }

    #line 41
    public partial class ParadoxGBufferPlugin  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            {

                #line 43
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxGBufferShaderPass", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 43
                context.BeginChild(__subMixin);

                #line 43
                context.Mixin(__subMixin, "ParadoxGBufferShaderPass");

                #line 43
                context.EndChild();
            }

            #line 47
            context.RemoveMixin(mixin, "NormalVSStream");

            #line 48
            context.RemoveMixin(mixin, "SpecularPowerMap");

            #line 49
            context.RemoveMixin(mixin, "SpecularPowerPerMesh");

            #line 52
            context.Mixin(mixin, "NormalVSGBuffer");

            #line 54
            context.Mixin(mixin, "SpecularPowerGBuffer");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxGBufferPlugin", new ParadoxGBufferPlugin());
        }
    }

    #line 57
    public partial class ParadoxDeferredLightingPointGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 61
            mixin.Mixin.AddMacro("DEFERRED_MAX_POINT_LIGHT_COUNT", context.GetParam(LightingKeys.MaxDeferredLights));

            #line 63
            mixin.Mixin.AddMacro("DEFERRED_POINT_LIGHTING_UNROLL_LOOP", 1);

            #line 64
            context.Mixin(mixin, "DeferredPointLighting");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredLightingPointGroup", new ParadoxDeferredLightingPointGroup());
        }
    }

    #line 67
    public partial class DeferredLightingDirectShadowGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 72
            mixin.Mixin.AddMacro("DEFERRED_MAX_DIRECT_SHADOW_LIGHT_COUNT", 1);

            #line 73
            mixin.Mixin.AddMacro("DEFERRED_DIRECT_LIGHTING_UNROLL_LOOP", 1);

            #line 74
            context.Mixin(mixin, "DeferredDirectionalShadowLighting");

            #line 76
            context.Mixin(mixin, "DeferredShadowMapCascadeBase");

            #line 78
            mixin.Mixin.AddMacro("SHADOWMAP_COUNT", 1);

            #line 79
            mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 80
            mixin.Mixin.AddMacro("SHADOWMAP_TOTAL_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 81
            mixin.Mixin.AddMacro("HAS_DYNAMIC_SHADOWMAP_COUNT", 0);
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("DeferredLightingDirectShadowGroup", new DeferredLightingDirectShadowGroup());
        }
    }

    #line 84
    public partial class DeferredLightingSpotShadowGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 89
            mixin.Mixin.AddMacro("DEFERRED_MAX_SPOT_SHADOW_LIGHT_COUNT", 1);

            #line 90
            mixin.Mixin.AddMacro("DEFERRED_SPOT_LIGHTING_UNROLL_LOOP", 1);

            #line 91
            context.Mixin(mixin, "DeferredSpotShadowLighting");

            #line 93
            context.Mixin(mixin, "DeferredShadowMapCascadeBase");

            #line 95
            mixin.Mixin.AddMacro("SHADOWMAP_COUNT", 1);

            #line 96
            mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 97
            mixin.Mixin.AddMacro("SHADOWMAP_TOTAL_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 98
            mixin.Mixin.AddMacro("HAS_DYNAMIC_SHADOWMAP_COUNT", 0);
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("DeferredLightingSpotShadowGroup", new DeferredLightingSpotShadowGroup());
        }
    }

    #line 101
    public partial class DeferredLightTypeGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 105
            if (context.GetParam(ShadowMapParameters.LightType) == LightType.Directional)

                #line 106
                context.Mixin(mixin, "DeferredLightingDirectShadowGroup");

            #line 107
            else 
#line 107
            if (context.GetParam(ShadowMapParameters.LightType) == LightType.Spot)

                #line 108
                context.Mixin(mixin, "DeferredLightingSpotShadowGroup");

            #line 110
            else

                #line 110
                context.Mixin(mixin, "DeferredLightingDirectShadowGroup");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("DeferredLightTypeGroup", new DeferredLightTypeGroup());
        }
    }

    #line 113
    public partial class NearestFilterGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 115
            context.Mixin(mixin, "DeferredLightTypeGroup");

            #line 116
            context.Mixin(mixin, "ShadowMapFilterDefault");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("NearestFilterGroup", new NearestFilterGroup());
        }
    }

    #line 119
    public partial class PcfGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 121
            context.Mixin(mixin, "DeferredLightTypeGroup");

            #line 122
            context.Mixin(mixin, "ShadowMapFilterPcf");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("PcfGroup", new PcfGroup());
        }
    }

    #line 125
    public partial class VsmGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 127
            context.Mixin(mixin, "DeferredLightTypeGroup");

            #line 128
            context.Mixin(mixin, "ShadowMapFilterVsm");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("VsmGroup", new VsmGroup());
        }
    }

    #line 131
    public partial class ParadoxShadowPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 135
            context.CloneProperties();

            #line 135
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 136
            context.Mixin(mixin, "DeferredShadowLightingShader");

            #line 138
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Nearest)

                {

                    #line 139
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 139
                    context.Mixin(__subMixin, "NearestFilterGroup");
                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                }

            #line 140
            else 
#line 140
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.PercentageCloserFiltering)

                {

                    #line 141
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 141
                    context.Mixin(__subMixin, "PcfGroup");
                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                }

            #line 142
            else 
#line 142
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Variance)

                {

                    #line 143
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 143
                    context.Mixin(__subMixin, "VsmGroup");
                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxShadowPrepassLighting", new ParadoxShadowPrepassLighting());
        }
    }

    #line 146
    public partial class ParadoxDeferredLightingDirectGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 150
            mixin.Mixin.AddMacro("DEFERRED_MAX_DIRECT_LIGHT_COUNT", 1);

            #line 151
            context.Mixin(mixin, "DeferredDirectionalLighting");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredLightingDirectGroup", new ParadoxDeferredLightingDirectGroup());
        }
    }

    #line 154
    public partial class ParadoxDeferredLightingSpotGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 158
            mixin.Mixin.AddMacro("DEFERRED_MAX_SPOT_LIGHT_COUNT", 1);

            #line 159
            context.Mixin(mixin, "DeferredSpotLighting");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredLightingSpotGroup", new ParadoxDeferredLightingSpotGroup());
        }
    }

    #line 162
    public partial class ParadoxDirectPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 164
            context.CloneProperties();

            #line 164
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            {

                #line 165
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 165
                context.Mixin(__subMixin, "ParadoxDeferredLightingDirectGroup");
                mixin.Mixin.AddCompositionToArray("lightingGroups", __subMixin.Mixin);
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDirectPrepassLighting", new ParadoxDirectPrepassLighting());
        }
    }

    #line 168
    public partial class ParadoxPointPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 172
            context.CloneProperties();

            #line 172
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 173
            if (context.GetParam(LightingKeys.MaxDeferredLights) > 0)

                {

                    #line 174
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 174
                    context.Mixin(__subMixin, "ParadoxDeferredLightingPointGroup");
                    mixin.Mixin.AddCompositionToArray("lightingGroups", __subMixin.Mixin);
                }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxPointPrepassLighting", new ParadoxPointPrepassLighting());
        }
    }

    #line 177
    public partial class ParadoxSpotPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 181
            context.CloneProperties();

            #line 181
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            {

                #line 182
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 182
                context.Mixin(__subMixin, "ParadoxDeferredLightingSpotGroup");
                mixin.Mixin.AddCompositionToArray("lightingGroups", __subMixin.Mixin);
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpotPrepassLighting", new ParadoxSpotPrepassLighting());
        }
    }

    #line 185
    public partial class ParadoxDeferredSpecular  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 187
            context.Mixin(mixin, "ComputeBRDFColorSpecularBlinnPhong");

            #line 188
            context.Mixin(mixin, "SpecularPowerGBuffer");

            {

                #line 189
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 189
                context.Mixin(__subMixin, "ComputeColorOne");
                mixin.Mixin.AddComposition("SpecularIntensityMap", __subMixin.Mixin);
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredSpecular", new ParadoxDeferredSpecular());
        }
    }

    #line 192
    public partial class ParadoxDefaultLightPrepassEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 196
            context.Mixin(mixin, "PositionVSGBuffer");

            #line 197
            context.Mixin(mixin, "NormalVSGBuffer");

            #line 198
            context.Mixin(mixin, "BRDFDiffuseBase");

            #line 199
            context.Mixin(mixin, "BRDFSpecularBase");

            {

                #line 200
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 200
                context.Mixin(__subMixin, "ComputeBRDFColorFresnel");
                mixin.Mixin.AddComposition("DiffuseColor", __subMixin.Mixin);
            }

            {

                #line 201
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 201
                context.Mixin(__subMixin, "ComputeBRDFDiffuseLambert");
                mixin.Mixin.AddComposition("DiffuseLighting", __subMixin.Mixin);
            }

            {

                #line 202
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 202
                context.Mixin(__subMixin, "ComputeBRDFColor");
                mixin.Mixin.AddComposition("SpecularColor", __subMixin.Mixin);
            }

            {

                #line 203
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 203
                context.Mixin(__subMixin, "ParadoxDeferredSpecular");
                mixin.Mixin.AddComposition("SpecularLighting", __subMixin.Mixin);
            }

            {

                #line 205
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxShadowPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 205
                context.BeginChild(__subMixin);

                #line 205
                context.Mixin(__subMixin, "ParadoxShadowPrepassLighting");

                #line 205
                context.EndChild();
            }

            #line 207
            context.Mixin(mixin, "DeferredLightingShader");

            {

                #line 209
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxDirectPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 209
                context.BeginChild(__subMixin);

                #line 209
                context.Mixin(__subMixin, "ParadoxDirectPrepassLighting");

                #line 209
                context.EndChild();
            }

            {

                #line 211
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxSpotPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 211
                context.BeginChild(__subMixin);

                #line 211
                context.Mixin(__subMixin, "ParadoxSpotPrepassLighting");

                #line 211
                context.EndChild();
            }

            {

                #line 213
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxPointPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 213
                context.BeginChild(__subMixin);

                #line 213
                context.Mixin(__subMixin, "ParadoxPointPrepassLighting");

                #line 213
                context.EndChild();
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDefaultLightPrepassEffect", new ParadoxDefaultLightPrepassEffect());
        }
    }

    #line 216
    public partial class DirectionalLightsShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 221
            mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(LightingKeys.MaxDirectionalLights));

            #line 222
            if (context.GetParam(LightingKeys.UnrollDirectionalLightLoop))

                #line 223
                mixin.Mixin.AddMacro("LIGHTING_UNROLL_LOOP", true);

            #line 225
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffusePixel)
            {

                #line 227
                context.Mixin(mixin, "ShadingDiffusePerPixel");
            }

            #line 229
            else 
#line 229
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertex)
            {

                #line 231
                context.Mixin(mixin, "ShadingDiffusePerVertex");
            }

            #line 233
            else 
#line 233
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseSpecularPixel)
            {

                #line 235
                context.Mixin(mixin, "ShadingDiffuseSpecularPerPixel");
            }

            #line 237
            else 
#line 237
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertexSpecularPixel)
            {

                #line 239
                context.Mixin(mixin, "ShadingDiffusePerVertexSpecularPerPixel");
            }

            #line 241
            context.Mixin(mixin, "DirectionalShading");

            #line 242
            context.Mixin(mixin, "ShadingEyeNormalVS");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("DirectionalLightsShader", new DirectionalLightsShader());
        }
    }

    #line 245
    public partial class ParadoxDiffuseDeferred  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 249
            if (context.GetParam(MaterialParameters.AlbedoDiffuse) != null)
            {

                {

                    #line 251
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 251
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoDiffuse));
                    mixin.Mixin.AddComposition("albedoDiffuse", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDiffuseDeferred", new ParadoxDiffuseDeferred());
        }
    }

    #line 255
    public partial class ParadoxSpecularDeferred  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 259
            if (context.GetParam(MaterialParameters.AlbedoSpecular) != null)
            {

                {

                    #line 261
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 261
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoSpecular));
                    mixin.Mixin.AddComposition("albedoSpecular", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpecularDeferred", new ParadoxSpecularDeferred());
        }
    }

    #line 265
    public partial class ParadoxDefaultDeferredShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 270
            context.Mixin(mixin, "ParadoxBaseShader");

            #line 272
            context.Mixin(mixin, "ParadoxSkinning");

            #line 274
            context.Mixin(mixin, "ParadoxShadowCast");

            #line 278
            if (context.GetParam(RenderingParameters.UseDeferred) && !context.GetParam(MaterialParameters.UseTransparent))
            {

                #line 280
                context.Mixin(mixin, "ParadoxGBufferPlugin");

                #line 281
                context.Mixin(mixin, "LightDeferredShading");

                #line 282
                context.Mixin(mixin, "ParadoxDiffuseDeferred");

                #line 283
                context.Mixin(mixin, "ParadoxSpecularDeferred");

                #line 285
                if (context.GetParam(MaterialParameters.AmbientMap) != null)
                {

                    #line 287
                    context.Mixin(mixin, "AmbientMapShading");

                    {

                        #line 288
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                        #line 288
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.AmbientMap));
                        mixin.Mixin.AddComposition("AmbientMap", __subMixin.Mixin);
                    }
                }
            }

            #line 292
            else
            {

                #line 293
                context.Mixin(mixin, "ParadoxDiffuseForward");

                #line 294
                context.Mixin(mixin, "ParadoxSpecularForward");

                #line 296
                if (context.GetParam(MaterialParameters.AmbientMap) != null)
                {

                    #line 298
                    context.Mixin(mixin, "AmbientMapShading");

                    {

                        #line 299
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                        #line 299
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.AmbientMap));
                        mixin.Mixin.AddComposition("AmbientMap", __subMixin.Mixin);
                    }
                }

                #line 302
                if (context.GetParam(MaterialParameters.UseTransparent))
                {

                    #line 304
                    context.Mixin(mixin, "TransparentShading");

                    #line 305
                    context.Mixin(mixin, "DiscardTransparent");
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDefaultDeferredShader", new ParadoxDefaultDeferredShader());
        }
    }
}
