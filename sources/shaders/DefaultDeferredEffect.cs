// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using SiliconStudio.Paradox.Graphics;


#line 3 "C:\Projects\Paradox\sources\shaders\DefaultDeferredEffect.pdxfx"
using SiliconStudio.Paradox.Effects.Data;

#line 4
using SiliconStudio.Paradox.Engine;

#line 6
namespace DefaultEffects
{
    [DataContract]
#line 9
    public partial class LightingParameters : ShaderMixinParameters
    {

        #line 11
        public static readonly ParameterKey<int> PerPixelDirectionalLightCount = ParameterKeys.New<int>();

        #line 12
        public static readonly ParameterKey<int> PerPixelDiffuseDirectionalLightCount = ParameterKeys.New<int>();

        #line 13
        public static readonly ParameterKey<int> PerVertexDirectionalLightCount = ParameterKeys.New<int>();

        #line 14
        public static readonly ParameterKey<int> PerVertexDiffusePixelSpecularDirectionalLightCount = ParameterKeys.New<int>();
    };

    #line 18
    public partial class ParadoxGBufferShaderPass  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 23
            context.CloneProperties();

            #line 23
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 24
            context.Mixin(mixin, "GBuffer");

            #line 25
            context.Mixin(mixin, "NormalVSStream");

            #line 27
            if (context.GetParam(MaterialParameters.SpecularPowerMap) != null)
            {

                #line 29
                context.Mixin(mixin, "SpecularPower");

                {

                    #line 30
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 30
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularPowerMap));
                    mixin.Mixin.AddComposition("SpecularPowerMap", __subMixin.Mixin);
                }
            }

            #line 33
            if (context.GetParam(MaterialParameters.SpecularIntensityMap) != null)
            {

                {

                    #line 35
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 35
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularIntensityMap));
                    mixin.Mixin.AddComposition("SpecularIntensityMap", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxGBufferShaderPass", new ParadoxGBufferShaderPass());
        }
    }

    #line 40
    public partial class ParadoxGBufferPlugin  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            {

                #line 42
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxGBufferShaderPass", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 42
                context.BeginChild(__subMixin);

                #line 42
                context.Mixin(__subMixin, "ParadoxGBufferShaderPass");

                #line 42
                context.EndChild();
            }

            #line 46
            context.RemoveMixin(mixin, "NormalVSStream");

            #line 47
            context.RemoveMixin(mixin, "SpecularPowerMap");

            #line 48
            context.RemoveMixin(mixin, "SpecularPowerPerMesh");

            #line 51
            context.Mixin(mixin, "NormalVSGBuffer");

            #line 53
            context.Mixin(mixin, "SpecularPowerGBuffer");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxGBufferPlugin", new ParadoxGBufferPlugin());
        }
    }

    #line 56
    public partial class ParadoxDeferredLightingPointGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 60
            mixin.Mixin.AddMacro("DEFERRED_MAX_POINT_LIGHT_COUNT", context.GetParam(LightingKeys.MaxDeferredLights));

            #line 62
            mixin.Mixin.AddMacro("DEFERRED_POINT_LIGHTING_UNROLL_LOOP", 1);

            #line 63
            context.Mixin(mixin, "DeferredPointLighting");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredLightingPointGroup", new ParadoxDeferredLightingPointGroup());
        }
    }

    #line 66
    public partial class DeferredLightingDirectShadowGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 71
            mixin.Mixin.AddMacro("DEFERRED_MAX_DIRECT_SHADOW_LIGHT_COUNT", 1);

            #line 72
            mixin.Mixin.AddMacro("DEFERRED_DIRECT_LIGHTING_UNROLL_LOOP", 1);

            #line 73
            context.Mixin(mixin, "DeferredDirectionalShadowLighting");

            #line 75
            context.Mixin(mixin, "DeferredShadowMapCascadeBase");

            #line 77
            mixin.Mixin.AddMacro("SHADOWMAP_COUNT", 1);

            #line 78
            mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 79
            mixin.Mixin.AddMacro("SHADOWMAP_TOTAL_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 80
            mixin.Mixin.AddMacro("HAS_DYNAMIC_SHADOWMAP_COUNT", 0);
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("DeferredLightingDirectShadowGroup", new DeferredLightingDirectShadowGroup());
        }
    }

    #line 83
    public partial class NearestFilterGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 85
            context.Mixin(mixin, "DeferredLightingDirectShadowGroup");

            #line 86
            context.Mixin(mixin, "ShadowMapFilterDefault");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("NearestFilterGroup", new NearestFilterGroup());
        }
    }

    #line 89
    public partial class PcfGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 91
            context.Mixin(mixin, "DeferredLightingDirectShadowGroup");

            #line 92
            context.Mixin(mixin, "ShadowMapFilterPcf");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("PcfGroup", new PcfGroup());
        }
    }

    #line 95
    public partial class VsmGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 97
            context.Mixin(mixin, "DeferredLightingDirectShadowGroup");

            #line 98
            context.Mixin(mixin, "ShadowMapFilterVsm");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("VsmGroup", new VsmGroup());
        }
    }

    #line 101
    public partial class ParadoxDirectShadowPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 105
            context.CloneProperties();

            #line 105
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 106
            context.Mixin(mixin, "DeferredShadowLightingShader");

            #line 108
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Nearest)

                {

                    #line 109
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 109
                    context.Mixin(__subMixin, "NearestFilterGroup");
                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                }

            #line 110
            else 
#line 110
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.PercentageCloserFiltering)

                {

                    #line 111
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 111
                    context.Mixin(__subMixin, "PcfGroup");
                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                }

            #line 112
            else 
#line 112
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Variance)

                {

                    #line 113
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 113
                    context.Mixin(__subMixin, "VsmGroup");
                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDirectShadowPrepassLighting", new ParadoxDirectShadowPrepassLighting());
        }
    }

    #line 116
    public partial class ParadoxDeferredLightingDirectGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 120
            mixin.Mixin.AddMacro("DEFERRED_MAX_DIRECT_LIGHT_COUNT", 1);

            #line 121
            context.Mixin(mixin, "DeferredDirectionalLighting");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredLightingDirectGroup", new ParadoxDeferredLightingDirectGroup());
        }
    }

    #line 124
    public partial class ParadoxDeferredLightingSpotGroup  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 128
            mixin.Mixin.AddMacro("DEFERRED_MAX_SPOT_LIGHT_COUNT", 1);

            #line 129
            context.Mixin(mixin, "DeferredSpotLighting");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredLightingSpotGroup", new ParadoxDeferredLightingSpotGroup());
        }
    }

    #line 132
    public partial class ParadoxDirectPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 134
            context.CloneProperties();

            #line 134
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            {

                #line 135
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 135
                context.Mixin(__subMixin, "ParadoxDeferredLightingDirectGroup");
                mixin.Mixin.AddCompositionToArray("lightingGroups", __subMixin.Mixin);
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDirectPrepassLighting", new ParadoxDirectPrepassLighting());
        }
    }

    #line 138
    public partial class ParadoxPointPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 142
            context.CloneProperties();

            #line 142
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 143
            if (context.GetParam(LightingKeys.MaxDeferredLights) > 0)

                {

                    #line 144
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 144
                    context.Mixin(__subMixin, "ParadoxDeferredLightingPointGroup");
                    mixin.Mixin.AddCompositionToArray("lightingGroups", __subMixin.Mixin);
                }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxPointPrepassLighting", new ParadoxPointPrepassLighting());
        }
    }

    #line 147
    public partial class ParadoxSpotPrepassLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 151
            context.CloneProperties();

            #line 151
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            {

                #line 152
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 152
                context.Mixin(__subMixin, "ParadoxDeferredLightingSpotGroup");
                mixin.Mixin.AddCompositionToArray("lightingGroups", __subMixin.Mixin);
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpotPrepassLighting", new ParadoxSpotPrepassLighting());
        }
    }

    #line 155
    public partial class ParadoxDeferredSpecular  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 157
            context.Mixin(mixin, "ComputeBRDFColorSpecularBlinnPhong");

            #line 158
            context.Mixin(mixin, "SpecularPowerGBuffer");

            {

                #line 159
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 159
                context.Mixin(__subMixin, "ComputeColorOne");
                mixin.Mixin.AddComposition("SpecularIntensityMap", __subMixin.Mixin);
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDeferredSpecular", new ParadoxDeferredSpecular());
        }
    }

    #line 162
    public partial class ParadoxDefaultLightPrepassEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 166
            context.Mixin(mixin, "PositionVSGBuffer");

            #line 167
            context.Mixin(mixin, "NormalVSGBuffer");

            #line 168
            context.Mixin(mixin, "BRDFDiffuseBase");

            #line 169
            context.Mixin(mixin, "BRDFSpecularBase");

            {

                #line 170
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 170
                context.Mixin(__subMixin, "ComputeBRDFColorFresnel");
                mixin.Mixin.AddComposition("DiffuseColor", __subMixin.Mixin);
            }

            {

                #line 171
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 171
                context.Mixin(__subMixin, "ComputeBRDFDiffuseLambert");
                mixin.Mixin.AddComposition("DiffuseLighting", __subMixin.Mixin);
            }

            {

                #line 172
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 172
                context.Mixin(__subMixin, "ComputeBRDFColor");
                mixin.Mixin.AddComposition("SpecularColor", __subMixin.Mixin);
            }

            {

                #line 173
                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                #line 173
                context.Mixin(__subMixin, "ParadoxDeferredSpecular");
                mixin.Mixin.AddComposition("SpecularLighting", __subMixin.Mixin);
            }

            {

                #line 175
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxDirectShadowPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 175
                context.BeginChild(__subMixin);

                #line 175
                context.Mixin(__subMixin, "ParadoxDirectShadowPrepassLighting");

                #line 175
                context.EndChild();
            }

            #line 177
            context.Mixin(mixin, "DeferredLightingShader");

            {

                #line 179
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxDirectPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 179
                context.BeginChild(__subMixin);

                #line 179
                context.Mixin(__subMixin, "ParadoxDirectPrepassLighting");

                #line 179
                context.EndChild();
            }

            {

                #line 181
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxSpotPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 181
                context.BeginChild(__subMixin);

                #line 181
                context.Mixin(__subMixin, "ParadoxSpotPrepassLighting");

                #line 181
                context.EndChild();
            }

            {

                #line 183
                var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxPointPrepassLighting", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 183
                context.BeginChild(__subMixin);

                #line 183
                context.Mixin(__subMixin, "ParadoxPointPrepassLighting");

                #line 183
                context.EndChild();
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDefaultLightPrepassEffect", new ParadoxDefaultLightPrepassEffect());
        }
    }

    #line 186
    public partial class DirectionalLightsShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 191
            mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(LightingKeys.MaxDirectionalLights));

            #line 192
            if (context.GetParam(LightingKeys.UnrollDirectionalLightLoop))

                #line 193
                mixin.Mixin.AddMacro("LIGHTING_UNROLL_LOOP", true);

            #line 195
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffusePixel)
            {

                #line 197
                context.Mixin(mixin, "ShadingDiffusePerPixel");
            }

            #line 199
            else 
#line 199
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertex)
            {

                #line 201
                context.Mixin(mixin, "ShadingDiffusePerVertex");
            }

            #line 203
            else 
#line 203
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseSpecularPixel)
            {

                #line 205
                context.Mixin(mixin, "ShadingDiffuseSpecularPerPixel");
            }

            #line 207
            else 
#line 207
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertexSpecularPixel)
            {

                #line 209
                context.Mixin(mixin, "ShadingDiffusePerVertexSpecularPerPixel");
            }

            #line 211
            context.Mixin(mixin, "DirectionalShading");

            #line 212
            context.Mixin(mixin, "ShadingEyeNormalVS");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("DirectionalLightsShader", new DirectionalLightsShader());
        }
    }

    #line 215
    public partial class ParadoxDiffuseDeferred  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 219
            if (context.GetParam(MaterialParameters.AlbedoDiffuse) != null)
            {

                {

                    #line 221
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 221
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoDiffuse));
                    mixin.Mixin.AddComposition("albedoDiffuse", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDiffuseDeferred", new ParadoxDiffuseDeferred());
        }
    }

    #line 225
    public partial class ParadoxSpecularDeferred  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 229
            if (context.GetParam(MaterialParameters.AlbedoSpecular) != null)
            {

                {

                    #line 231
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 231
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoSpecular));
                    mixin.Mixin.AddComposition("albedoSpecular", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpecularDeferred", new ParadoxSpecularDeferred());
        }
    }

    #line 235
    public partial class ParadoxDefaultDeferredShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 240
            context.Mixin(mixin, "ParadoxBaseShader");

            #line 242
            context.Mixin(mixin, "ParadoxSkinning");

            #line 244
            context.Mixin(mixin, "ParadoxShadowCast");

            #line 248
            if (context.GetParam(RenderingParameters.UseDeferred) && !context.GetParam(MaterialParameters.UseTransparent))
            {

                #line 250
                context.Mixin(mixin, "ParadoxGBufferPlugin");

                #line 251
                context.Mixin(mixin, "LightDeferredShading");

                #line 252
                context.Mixin(mixin, "ParadoxDiffuseDeferred");

                #line 253
                context.Mixin(mixin, "ParadoxSpecularDeferred");

                #line 255
                if (context.GetParam(MaterialParameters.AmbientMap) != null)
                {

                    #line 257
                    context.Mixin(mixin, "AmbientMapShading");

                    {

                        #line 258
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                        #line 258
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.AmbientMap));
                        mixin.Mixin.AddComposition("AmbientMap", __subMixin.Mixin);
                    }
                }
            }

            #line 262
            else
            {

                #line 263
                context.Mixin(mixin, "ParadoxDiffuseForward");

                #line 264
                context.Mixin(mixin, "ParadoxSpecularForward");

                #line 266
                if (context.GetParam(MaterialParameters.AmbientMap) != null)
                {

                    #line 268
                    context.Mixin(mixin, "AmbientMapShading");

                    {

                        #line 269
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                        #line 269
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.AmbientMap));
                        mixin.Mixin.AddComposition("AmbientMap", __subMixin.Mixin);
                    }
                }

                #line 272
                if (context.GetParam(MaterialParameters.UseTransparent))
                {

                    #line 274
                    context.Mixin(mixin, "TransparentShading");

                    #line 275
                    context.Mixin(mixin, "DiscardTransparent");
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDefaultDeferredShader", new ParadoxDefaultDeferredShader());
        }
    }
}
