// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using System;
using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Graphics;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using Buffer = SiliconStudio.Paradox.Graphics.Buffer;

using SiliconStudio.Paradox.Effects.Data;
using SiliconStudio.Paradox.Effects;
namespace SiliconStudio.Paradox.Effects.Core
{
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxBaseShader  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "ShaderBase");
                context.Mixin(mixin, "ShadingBase");
                context.Mixin(mixin, "TransformationWAndVP");
                context.Mixin(mixin, "PositionVSStream");
                if (context.GetParam(MaterialParameters.HasNormalMap))
                {
                    context.Mixin(mixin, "NormalVSFromNormalMapping");
                }
                else
                {
                    context.Mixin(mixin, "NormalVSFromMesh");
                }
                if (context.GetParam(MaterialParameters.HasSkinningPosition))
                {
                    if (context.GetParam(MaterialParameters.SkinningBones) > context.GetParam(MaterialParameters.SkinningMaxBones))
                    {
                        context.SetParam(MaterialParameters.SkinningMaxBones, context.GetParam(MaterialParameters.SkinningBones));
                    }
                    mixin.Mixin.AddMacro("SkinningMaxBones", context.GetParam(MaterialParameters.SkinningMaxBones));
                    context.Mixin(mixin, "TransformationSkinning");
                    if (context.GetParam(MaterialParameters.HasSkinningNormal))
                    {
                        context.Mixin(mixin, "NormalSkinning");
                    }
                    if (context.GetParam(MaterialParameters.HasSkinningTangent))
                    {
                        context.Mixin(mixin, "TangentSkinning");
                    }
                    if (context.GetParam(MaterialParameters.HasSkinningNormal))
                    {
                        if (context.GetParam(MaterialParameters.HasNormalMap))
                        {
                            context.Mixin(mixin, "NormalVSSkinningNormalMapping");
                        }
                        else
                        {
                            context.Mixin(mixin, "NormalVSSkinningFromMesh");
                        }
                    }
                }
                context.Mixin(mixin, "MaterialSurfaceCompositor");
                if (context.GetParam(LightingKeys.CastShadows))

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Name = "ShadowMapCaster" };
                        context.BeginChild(__subMixin);
                        context.Mixin(__subMixin, "ShadowMapCaster");
                        context.EndChild();
                    }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxBaseShader", new ParadoxBaseShader());
            }
        }
    }
}
